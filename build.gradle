import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    // id 'com.github.spotbugs' version '5.2.1'
    id 'com.diffplug.spotless' version '7.2.1'
    id 'com.github.nbaztec.coveralls-jacoco' version '1.2.20'
    id 'com.vanniktech.maven.publish' version '0.34.0'
}

group = 'com.uber'
description = 'Java bindings for H3, a hierarchical hexagonal geospatial indexing system.'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.openjdk.jmh:jmh-core:1.19'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.19'
    testImplementation 'com.google.guava:guava:33.3.1-jre'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.2'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.platform.listeners.uid.tracking.enabled', 'true'
    finalizedBy jacocoTestReport
}

// Native build properties
ext {
    h3GitRemote = project.findProperty('h3GitRemote') ?: 'https://github.com/uber/h3.git'
    h3UseDocker = project.findProperty('h3UseDocker') ?: 'true'
    h3SystemPrune = project.findProperty('h3SystemPrune') ?: 'false'
    h3DockcrossTag = project.findProperty('h3DockcrossTag') ?: '20240812-60fa1b0'
    h3DockcrossOnly = project.findProperty('h3DockcrossOnly') ?: ''
    h3GithubArtifactsUse = project.findProperty('h3GithubArtifactsUse') ?: 'false'
    h3GithubArtifactsByRun = project.findProperty('h3GithubArtifactsByRun') ?: ''
}

// Load H3 version from properties file
def h3VersionProps = new Properties()
file("h3version.properties").withInputStream { h3VersionProps.load(it) }
ext.h3GitReference = h3VersionProps.getProperty('h3.git.reference')

compileJava {
    options.compilerArgs += ['-h', "${projectDir}/src/main/c/h3-java/src"]
}

// Task to build H3 native code
task buildH3(type: Exec) {
    workingDir "${projectDir}"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'powershell', '-ExecutionPolicy', 'Bypass', '-File',
                './src/main/c/h3-java/build-h3-windows.ps1', h3GitRemote, h3GitReference
    } else {
        commandLine './src/main/c/h3-java/build-h3.sh', h3GitRemote, h3GitReference, h3UseDocker,
                h3SystemPrune, h3DockcrossTag, h3DockcrossOnly,
                h3GithubArtifactsUse, h3GithubArtifactsByRun
    }
    dependsOn compileJava
    outputs.dir("${projectDir}/src/main/resources")
}

processResources {
    dependsOn buildH3
}

test {
    dependsOn processResources
    // finalizedBy jacocoTestReport
}

spotless {
    java {
        googleJavaFormat()
    }
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

jar {
    dependsOn buildH3
    from sourceSets.main.resources
    duplicatesStrategy = DuplicatesStrategy.WARN
}

mavenPublishing {
  coordinates(project.group, "h3", project.version)

  pom {
    name = "h3"
    description = project.description
    url = "https://github.com/uber/h3-java"
    licenses {
      license {
        name = "The Apache License, Version 2.0"
        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
        distribution = "http://www.apache.org/licenses/LICENSE-2.0.txt"
      }
    }
    organization {
        name = 'Uber Open Source'
        url = 'https://github.com/uber/'
    }
    developers {
      developer {
        id = "isaacbrodsky"
        name = "Isaac Brodsky"
        email = "isaac@isaacbrodsky.com"
      }
    }
    scm {
      url = "http://github.com/uber/h3-java/tree/master"
      connection = "scm:git:git://github.com/uber/h3-java.git"
      developerConnection = "scm:git:ssh://git@github.com/uber/h3-java.git"
    }
  }

  // the first parameter configures the -javadoc artifact, possible values:
  // - `JavadocJar.None()` don't publish this artifact
  // - `JavadocJar.Empty()` publish an empty jar
  // - `JavadocJar.Javadoc()` to publish standard javadocs
  // the second whether to publish a sources jar
  configure(new JavaLibrary(new JavadocJar.Javadoc(), true))

  publishToMavenCentral()

  signAllPublications()
}

sourcesJar {
    dependsOn buildH3
}
